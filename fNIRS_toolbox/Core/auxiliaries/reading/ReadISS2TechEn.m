function [varargout] = ReadISS2TechEn(filename, probefile, InstrWavelengthList)

% This function reads .txt files generated by ISS and organize information
% onto typical HomER info. In order to successfully convert ISS files into
% .nirs files, the user must specify a specific file (.layout) that
% specifies the source-detector layout configuration. It basically contains
% the SD structure largely used by HomER. The user must build the .layout
% file by itself before running this function. The function will also need
% a list of wavelengths from the ISS instrument to be used (InstrWavelengthList). 
%
% If passed without input arguments, a window will pop up so that the user
% can first select the directory(ies) containing the ISS data. A second
% window will pop up asking for the .layout file that should be used with
% the data to be converted
%
% ATTENTION: This function needs a .txt file containing the maps of the
% wavelengths for each ISS laser in the box. By default, it employs the
% laser map of the University of Campinas' Imagent system.  If you are NOT
% using this system, please change the file. 
%
% Created by: R. Mesquita on July 27, 2017.
%
% Last Modifiedy by:
%   7/27/2017: get acquisition frequency direct from data file and store in
%   the SD.f variable (R. Mesquita)
%   8/9/2017: phi exports phase in radians rather than degrees (that is
%   needed for absolute quantification) (R. Mesquita)
%


clc
% Asks for a file if none is passed as argument
if ~exist('filename')
    uiwait( msgbox({'Missing a folder to read the data from.'...
        'Please select the FOLDER where all NIRS data is located'}, ...
        'Warning','warn') );
    ISSFolder = uigetfile_n_dir; % get directory list
    % Get probe layout
    probefile = GetProbeFileName;
    % Get wavelength list from instrument
    if ~exist('InstrWavelengthList')
        uiwait( msgbox({'Missing the wavelength configuration for the ISS Instrument.'...
            'Please select the wavelength configuration file (.wviss) for the dataset'}, ...
            'Warning','warn') );
        [wl_layout,wl_path] = uigetfile('*.wviss','Choose the file containing wavelength info');
        InstrWavelengthList = [wl_path wl_layout];
    end
    wavelength = load(InstrWavelengthList,'-ascii');
    
    for i=1:length(ISSFolder) % for each directory
        ISS_file= dir([ISSFolder{i} '/*.txt']); % get file list
        
        for files=1:length(ISS_file) % for each file
            disp(['Running file ' num2str(files) ' of ' num2str(length(ISS_file)) ' in folder ' num2str(i)])
            [data{files}, filename{files}] = ...
                RunISS2nirs([ISSFolder{i} '/' ISS_file(files).name],probefile,wavelength);
        end
    end
    
else
    % Simply convert the filename passed throught the function
    [data, filename] = RunISS2nirs(filename,probefile)
end

if nargout > 0; varargout{1} = data;
    if nargout > 1; varargout{2} = filename; end
else
    % Save .nirs file in the same .txt folder/path
    save([filename(1:end-4) '.nirs'],'-MAT','data')
end






% ----------------------------------------------------------
% ------------------- AUXILIARY FUNCTIONS ------------------
% ----------------------------------------------------------

function [data, filename] = RunISS2nirs(filename,probefile,wavelength)

% Integrate optical probe info
load(probefile,'-MAT')

% Open file to read info
file = fopen([filename],'r');

% Read and check number of detectors
while isempty(strfind(fgets(file), '#ACQ INFORMATION'))
end
Ndet = str2num(fread(file,2,'uint8=>char'));
if SD.nDets == Ndet
else
    disp('Number of detectors is different on optical file and data file. Check it out')
end

% Read number of channels
while isempty(strfind(fgets(file), 'Detector'))
end
Nchn = fscanf(file,'%g',2);


% Read the sampling frequency
while isempty(strfind(fgets(file), '#Data Update Rate'))
end
foo = fgets(file);
SD.f = str2num(foo(1:5)); 

% Read data organization (1: AC DC and Phase are GROUPED; 2: AC DC and
% Phase are NOT GROUPED)
while isempty(strfind(fgets(file), '#FILE INFORMATION'))
end
fgets(file); foo = fgets(file);
file_org = foo(1:4);


% Read SD distances from data file in 16- or 32-acquisition mode
while isempty(strfind(fgets(file), '#DISTANCE SETTINGS'))
end

error = 0;
rho = [];

for i = 1:Ndet
    fgets(file); fgets(file); fgets(file);
    rho = [rho; fscanf(file,'%g',[Nchn 1])];
    fgets(file); fgets(file);
end
rho=rho';
rho = rho(:,channel_map);

% Create matrix to store data
L = Ndet*Nchn*3+10; % Define number of columns in the matrix data

% Read data from ISS .txt file into matrix
while isempty(strfind(fgets(file), '#DATA BEGINS'))
end
fgets(file); fgets(file);
data = fscanf(file,'%g',[L inf]);
data = data';

% Close file
fclose(file);

% Organize data into HomER variables
t = data(:,1);
t = t - t(1);
if file_org == 'TRUE' % then AC, DC and Phase are grouped for each separation
    d = data(:,6:3:L-5); % AC component of the signal
    d_dc = data(:,7:3:L-5);  % DC component of the signal
    phi = data(:,8:3:L-5);  % Phase of the scattered signal
else % AC, DC and Phase are not grouped; file written with all ACs for each detector, then all DCs, then all Phases.
    d = []; d_dc = []; phi = [];
    d_cnt = 6; dc_cnt = d_cnt + length(rho)/2; phi_cnt = dc_cnt + length(rho)/2;
    for det = 1:Ndet
        d = [d data(:,d_cnt:d_cnt+length(rho)/2-1)];
        d_dc = [d_dc data(:,dc_cnt:dc_cnt+length(rho)/2-1)];
        phi = [phi data(:,phi_cnt:phi_cnt+length(rho)/2-1)];
        d_cnt = d_cnt + 3*length(rho)/2;
        dc_cnt = dc_cnt + 3*length(rho)/2;
        phi_cnt = phi_cnt + 3*length(rho)/2;
    end
end
        

% Organize stim (at present, make all stim equal)
s = data(:,4);
lst = find(s~=0);
s(lst) = 1;

% Remove random data from channels not included in the probe, and wrap
% everything up onto FD-NIRS object
data = fd_nirs;
data.d = d(:,channel_map);
data.fd.dc = d_dc(:,channel_map);
phi = phi(:,channel_map);
data.fd.phi = degtorad(phi); % to convert phi from deg to radians for posterior analysis
data.SD = SD;
data.SD.wavelength = wavelength;
data.SD.rho = rho;
data.t = t;
data.s = s;

% Create auxiliary variable for HomER
data.aux = zeros(size(t,1),4);

% Clear temp variables
clear ans file error ii L channel_map N* probe* wavelength Ndet 
clear foo lst Instr* wl* d_dc phi rho ml d s SD t

if nargout > 0; varargout{1} = data;
    if nargout > 1; varargout{2} = filename; end
else
    % Save .nirs file in the same .txt folder/path
    save([filename(1:end-4) '.nirs'],'-MAT','data')
end

% end

%return

